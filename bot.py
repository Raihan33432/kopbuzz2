import os
import threading
import asyncio
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

app = Flask(__name__)

# ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∞‡ßÅ‡¶ü (Render ‡¶™‡ßã‡¶∞‡ßç‡¶ü detect ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
@app.route('/')
def home():
    return "Telegram bot is running!"

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"/start called by user {update.message.from_user.id}")
    buttons = [[
        InlineKeyboardButton("‚úÖ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="check"),
        InlineKeyboardButton("‚ùå ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡ßá‡¶≤", callback_data="cancel")
    ]]
    await update.message.reply_text(
        "üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Button clicked: {update.callback_query.data} by user {update.callback_query.from_user.id}")
    query = update.callback_query
    await query.answer()
    if query.data == "check":
        user_data[query.from_user.id] = []
        await query.message.reply_text("üì• ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¶‡¶ø‡¶® (‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶∞‡ßá):")
    elif query.data == "cancel":
        await query.message.reply_text("‚ùå ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

async def handle_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Numbers received from {update.message.from_user.id}: {update.message.text}")
    user_id = update.message.from_user.id
    if user_id not in user_data:
        return
    text = update.message.text.strip()
    numbers = [n.strip() for n in text.split("\n") if n.strip()]
    grouped = [numbers[i:i+5] for i in range(0, len(numbers), 5)]
    all_found = []
    # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ check_numbers ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¶‡¶ø‡ßü‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã
    # ‡¶è‡¶ñ‡¶® ‡¶°‡ßá‡¶Æ‡ßã ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶¨ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶á Not Found ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßã
    for idx, group in enumerate(grouped, start=1):
        # result = await check_numbers(group)  # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßã
        result = {num: False for num in group}  # ‡¶°‡ßá‡¶Æ‡ßã
        formatted = f"üìä Group {idx}:\n"
        for num, status in result.items():
            mark = "‚úÖ Telegram Account" if status else "‚ùå Not Found"
            formatted += f"{num} ‚Äì {mark}\n"
            if status:
                all_found.append(num)
        await update.message.reply_text(formatted)
    if all_found:
        await update.message.reply_text("üìã Telegram ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞:\n" + "\n".join(all_found))
    else:
        await update.message.reply_text("‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
    del user_data[user_id]

async def run_bot():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    print("BOT_TOKEN:", BOT_TOKEN)  # Debug: ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶≤‡ßã‡¶ó‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
    app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()
    app_telegram.add_handler(CommandHandler("start", start))
    app_telegram.add_handler(CallbackQueryHandler(handle_button))
    app_telegram.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_numbers))
    await app_telegram.run_polling()

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    threading.Thread(target=run_flask).start()

    loop = asyncio.get_event_loop()
    loop.create_task(run_bot())
    loop.run_forever()
