import os
import asyncio
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from check import check_numbers  # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Telethon ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞

# Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™
app = Flask(__name__)

# Environment Variables
BOT_TOKEN    = os.getenv("BOT_TOKEN")
APP_URL      = os.getenv("APP_URL")      # e.g. https://kopbuzz2.onrender.com
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"

# Telegram Application ‡¶§‡ßà‡¶∞‡¶ø‡¶∞
application = (
    ApplicationBuilder()
    .token(BOT_TOKEN)
    .build()
)

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú
user_data = {}

# ‚Äî‚Äî‚Äî‚Äî‚Äî Handlers ‚Äî‚Äî‚Äî‚Äî‚Äî
async def start(update: Update, context):
    buttons = [[
        InlineKeyboardButton("‚úÖ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="check"),
        InlineKeyboardButton("‚ùå ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡ßá‡¶≤", callback_data="cancel")
    ]]
    await update.message.reply_text(
        "üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_button(update: Update, context):
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id
    if query.data == "check":
        user_data[uid] = []
        await query.message.reply_text("üì• ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¶‡¶ø‡¶® (‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶∞‡ßá):")
    else:
        await query.message.reply_text("‚ùå ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

async def handle_numbers(update: Update, context):
    uid = update.message.from_user.id
    if uid not in user_data:
        return
    numbers = [n.strip() for n in update.message.text.split("\n") if n.strip()]
    grouped = [numbers[i:i+5] for i in range(0, len(numbers), 5)]
    found = []
    for idx, grp in enumerate(grouped, start=1):
        result = await check_numbers(grp)
        text = f"üìä Group {idx}:\n"
        for num, ok in result.items():
            mark = "‚úÖ Telegram Account" if ok else "‚ùå Not Found"
            text += f"{num} ‚Äì {mark}\n"
            if ok:
                found.append(num)
        await update.message.reply_text(text)
    if found:
        await update.message.reply_text("üìã Telegram ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞:\n" + "\n".join(found))
    else:
        await update.message.reply_text("‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
    del user_data[uid]
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

# Register handlers
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(handle_button))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_numbers))

# Webhook ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü
@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, application.bot)
    # ‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ update-‡¶ï‡ßá asyncio loop-‡¶è process_update ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶ì
    loop = asyncio.get_event_loop()
    loop.create_task(application.process_update(update))
    return "OK", 200

# Health-check ‡¶∞‡ßÅ‡¶ü
@app.route("/")
def index():
    return "Bot is alive"

if __name__ == "__main__":
    # Webhook ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
    webhook_url = f"{APP_URL}{WEBHOOK_PATH}"
    print("Setting webhook to:", webhook_url)
    asyncio.run(application.bot.set_webhook(webhook_url))

    # Flask ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶ì
    port = int(os.getenv("PORT", "5000"))
    app.run(host="0.0.0.0", port=port)
